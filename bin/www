#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app'),
      debug = require('debug')('bbbaaa:server'),
      http = require('http');

/**
 * HTTPS dependencies.
 */
const fs = require('fs'),
      https = require('https'),
      privateKey = fs.readFileSync('ssl/server.key', 'utf8'),
      certificate = fs.readFileSync('ssl/server.crt', 'utf8'),
      credentials = { key: privateKey, cert: certificate };

/**
 * Get port from environment and store in Express.
 */

let httpPort = normalizePort(process.env.PORT || '3998'),
    httpsPort = normalizePort('3999');

/**
 * Create HTTP/S server.
 */

let httpServer = http.createServer(app),
    httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);
httpServer.on('error', onError);
httpServer.on('listening', onListeningHttp);

httpsServer.listen(httpsPort);
httpsServer.on('error', onError);
httpsServer.on('listening', onListeningHttps);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP/S server "listening" event.
 */

function onListeningHttp() {
    let addr = httpServer.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

function onListeningHttps() {
    let addr = httpsServer.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
